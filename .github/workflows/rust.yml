name: Rust tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  format:

    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust stable
      run: rustup update stable && rustup default stable

    - run: cargo fmt

    - name: Reviewdog suggester (cargo-fmt)
      uses: reviewdog/action-suggester@v1
      with:
        tool_name: cargo-fmt
        filter_mode: file
        fail_on_error: true


  lint:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust stable
      run: rustup update stable && rustup default stable && rustup component add clippy

    - uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest
    - name: reviewdog (cargo-check, clippy)
      if: github.event_name != 'pull_request'
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
      run: reviewdog -runners=cargo-check,clippy -reporter=github-check -filter-mode=nofilter -fail-on-error
    - name: reviewdog (cargo-check, clippy)
      if: github.event_name == 'pull_request'
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
      run: reviewdog -runners=cargo-check,clippy -reporter=github-pr-review -filter-mode=file -fail-on-error


  build:

    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.toolchain != 'stable' }}
    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly

    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust ${{ matrix.toolchain }}
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        if: matrix.toolchain != 'stable'
        run: cargo test --verbose

      - name: Install cargo-llvm-cov
        if: matrix.toolchain == 'stable'
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Run tests & Generate code coverage
        if: matrix.toolchain == 'stable'
        run: cargo llvm-cov --all-features --workspace --codecov --output-path codecov.json
      - name: Upload coverage artifact
        if: matrix.toolchain == 'stable'
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: coverage
          path: codecov.json
          retention-days: 7


  upload-coverage:

    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true
