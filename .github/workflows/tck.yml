name: Check TCK

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

concurrency:
  group: tck
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  tck:

    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.tck.outputs.tests }}
      passed: ${{ steps.tck.outputs.pass }}
      failed: ${{ steps.tck.outputs.fail }}

    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: cargo build --verbose

      - name: Checkout https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-tck
        run: git clone --depth=1 https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-tck.git asciidoc-tck
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        working-directory: asciidoc-tck
        run: |
          npm ci
          {
            echo 'import {inspect} from "node:util";'
            echo 'inspect.defaultOptions.depth = null;'
            echo 'Error.stackTraceLimit = 0;'
          } >> depth.js
      - name: Run AsciiDoc TCK
        continue-on-error: true
        id: tck
        working-directory: asciidoc-tck
        env:
          NODE_OPTIONS: --import ./depth.js
        run: |
          npx asciidoc-tck cli -c ${{ github.workspace }}/target/debug/asciidoc2rs | tee output.txt
          grep 'ℹ' output.txt | awk '{print $2"="$3}' >> "$GITHUB_OUTPUT"
          sed -i'' '/^ℹ/d' output.txt

      - name: Generate summary
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('node:fs');
            const readline = require('node:readline');

            const chunkStream = fs.createReadStream('asciidoc-tck/output.txt', {encoding: 'utf8'});
            const lineStream = readline.createInterface({
              input: chunkStream,
              crlfDelay: Infinity,
            });

            const currentDescribes = [];
            const sections = [];
            const listBuffers = [];
            let tableBuffers = [];
            let codeBuffer = '';
            let codeIndend = 0;
            for await (const line of lineStream) {
              if (line.length === 0) {
                continue;
              }

              const lastDescribe = currentDescribes.toReversed()[0];
              const lastDescribePosition = line.indexOf(`▶ ${lastDescribe} (`);
              if (lastDescribePosition !== -1 && currentDescribes.length > 2) {
                currentDescribes.pop();
                const name = line.slice(lastDescribePosition + 2);
                const child = listBuffers.pop();
                let el;
                if (child.length > 0) {
                  el = core.summary.addRaw(`<p>${name}</p>`, true).addList(child).stringify();
                } else {
                  if (codeIndend > 0) {
                    const label = core.summary.stringify();
                    core.summary.emptyBuffer();
                    const content = core.summary.addCodeBlock(codeBuffer, 'js').stringify();
                    core.summary.emptyBuffer();
                    tableBuffers.toReversed()[0].push(core.summary.addDetails(label, content).stringify());
                    core.summary.emptyBuffer();
                    codeIndend = 0;
                    codeBuffer = '';
                  }
                  core.summary.addTable(tableBuffers);
                  tableBuffers = [];
                  const child = core.summary.stringify();
                  core.summary.emptyBuffer();
                  el = core.summary.addRaw(`<p>${name}</p>`, true).addRaw(child).stringify();
                }
                core.summary.emptyBuffer();
                listBuffers.toReversed()[0].push(el);
                continue;
              }
              if (lastDescribePosition !== -1 && currentDescribes.length === 2) {
                sections.push([currentDescribes.pop(), listBuffers.pop()]);
                continue;
              }
              if (lastDescribePosition !== -1) {
                currentDescribes.pop();
                continue;
              }

              const describePosition = line.indexOf('▶');
              if (describePosition !== -1 && currentDescribes.length < 1) {
                const name = line.slice(describePosition + 2);
                currentDescribes.push(name);
                continue;
              }
              if (describePosition !== -1) {
                const name = line.slice(describePosition + 2);
                currentDescribes.push(name);
                listBuffers.push([]);
                continue;
              }

              if (tableBuffers.length === 0) {
                tableBuffers.push([{data: 'Status', header: true}, {data: 'Test Case', header: true}, {data: 'Message', header: true}]);
              }

              const passedItPosition = line.indexOf('✔');
              if (passedItPosition !== -1) {
                if (codeIndend > 0) {
                  const label = core.summary.stringify();
                  core.summary.emptyBuffer();
                  const content = core.summary.addCodeBlock(codeBuffer, 'js').stringify();
                  core.summary.emptyBuffer();
                  tableBuffers.toReversed()[0].push(core.summary.addDetails(label, content).stringify());
                  core.summary.emptyBuffer();
                  codeIndend = 0;
                  codeBuffer = '';
                }
                const name = line.slice(passedItPosition + 2);
                tableBuffers.push(['Pass&nbsp;✅', name, ''])
                continue;
              }

              const failedItPosition = line.indexOf('✖');
              if (failedItPosition !== -1) {
                if (codeIndend > 0) {
                  const label = core.summary.stringify();
                  core.summary.emptyBuffer();
                  const content = core.summary.addCodeBlock(codeBuffer, 'js').stringify();
                  core.summary.emptyBuffer();
                  tableBuffers.toReversed()[0].push(core.summary.addDetails(label, content).stringify());
                  core.summary.emptyBuffer();
                  codeBuffer = '';
                }
                codeIndend = failedItPosition + 2;
                const name = line.slice(codeIndend);
                tableBuffers.push(['Fail&nbsp;❌', name])
                continue;
              }

              const failedMessagePosition = line.indexOf('AssertionError');
              if (failedMessagePosition !== -1) {
                const message = line.slice(failedMessagePosition, -3);
                const [msg, name] = message.split('for');
                core.summary.addRaw(`${msg.trim()} for <code>${name.trim()}</code>`);
                codeBuffer += '{\n';
                continue;
              }

              const code = line.slice(codeIndend);
              codeBuffer += `${code}\n`;
            }

            core.summary
              .addHeading('TCK result')
              .addImage('https://a11y-shields-badge.kphrx.workers.dev/badge/TCK%20passed-${{ steps.tck.outputs.pass }}-success', 'TCK passed count')
              .addImage('https://a11y-shields-badge.kphrx.workers.dev/badge/TCK%20failed-${{ steps.tck.outputs.fail }}-important', 'TCK failed count');
            for (const [section, bodyList] of sections) {
              core.summary.addHeading(section, 2).addList(bodyList);
            }
            await core.summary.write();


  dynamic-badges:

    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: tck
    env:
      BADGE_GIST_ID: e795d8d23466d049a08e03c23301e996

    steps:
      - name: Result badge
        uses: Schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistId: ${{ env.BADGE_GIST_ID }}
          filename: asciidoc2rs-tck-tests.json
          label: TCK tests
          valColorRange: ${{ needs.tck.outputs.passed }}
          maxColorRange: ${{ needs.tck.outputs.tests }}
          minColorRange: 0
          message: ${{ needs.tck.outputs.passed }} / ${{ needs.tck.outputs.tests }}
